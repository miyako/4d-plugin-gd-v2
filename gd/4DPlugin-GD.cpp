/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-GD.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : GD
 #	author : miyako
 #	2020/06/20
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-GD.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- GD
            
			case 1 :
				GD_Filter(params);
				break;
			case 2 :
				GD_Animate(params);
				break;
			case 3 :
				GD_Rotate(params);
				break;

        }

	}
	catch(...)
	{

	}
}

gdImagePtr getImagePtr(PA_Picture p) {
    
    gdImagePtr imagePtr = NULL;
    
    if(p){
    
        p = PA_DuplicatePicture(p, kcpRetainOnly);
        
        //convert picture
        PA_Variable args[3];
        args[0] = PA_CreateVariable(eVK_Picture);
        PA_SetPictureVariable(&args[0], p);
        
        args[1] = PA_CreateVariable(eVK_Unistring);
        PA_Unistring ustr = PA_CreateUnistring((PA_Unichar *)".\0p\0n\0g\0\0\0");
        PA_SetStringVariable(&args[1], &ustr);
        
        PA_ExecuteCommandByID(CONVERT_PICTURE, args, 2);
        
        p = PA_GetPictureVariable(args[0]); /* the picture has been converted */
        
        PA_SetPictureVariable(&args[0], NULL);
        
        PA_ClearVariable(&args[0]);
        PA_ClearVariable(&args[1]);
        
        PA_Handle h = PA_NewHandle(0);
        
        PA_ErrorCode err = eER_NoErr;
        PA_GetPictureData(p, 1, h);
        err = PA_GetLastError();
        
        if(err == eER_NoErr)
        {
            imagePtr = gdImageCreateFromPngPtr(PA_GetHandleSize(h), PA_LockHandle(h));
            PA_UnlockHandle(h);
        }
        PA_DisposeHandle(h);
    }
    
    return imagePtr;
}

gdImagePtr getImagePtrParameter(PA_PluginParameters params, short index) {

    PA_Picture p = PA_GetPictureParameter(params, index);
    
    return getImagePtr(p);
}

#pragma mark -

void GD_Filter(PA_PluginParameters params) {

    gdImagePtr gd_in = getImagePtrParameter(params, 1);
        
    PA_CollectionRef statuses = PA_CreateCollection();
    PA_ObjectRef returnValue = PA_CreateObject();
    
    if(gd_in){
        
        gdImageSaveAlpha(gd_in, 1);
        
        PA_CollectionRef filters = PA_GetCollectionParameter(params, 2);
        
        if(filters) {
            
            PA_long32 countFilters = PA_GetCollectionLength(filters);
            if(countFilters > 0) {
                
                for(PA_long32 i = 0; i < countFilters; ++i) {
                    PA_Variable v = PA_GetCollectionElement(filters, i);
                    if(PA_GetVariableKind(v) == eVK_Object) {
                        
                        PA_ObjectRef param = PA_GetObjectVariable(v);
                        
                        //init values
                        gd_filter_type_t filter_type = IMG_FILTER_NONE;
                        float weight = 0.0f;
                        double contrast = 0.0f;
                        int brightness = 0L;
                        int sub = 0L;
                        int plus = 0L;
                        int size = 0L;
                        unsigned int mode = 0L;
                        int red = 0L;
                        int green = 0L;
                        int blue = 0L;
                        int alpha = 0L;
                        float div = 0L;
                        float offset = 0L;
                        int radius = 0L;
                        double sigma = 0.0f;
                        float filter[3][3] = {
                            {0.0f, 0.0f, 0.0f},
                            {0.0f, 0.0f, 0.0f},
                            {0.0f, 0.0f, 0.0f}
                        };

                        if(ob_is_defined(param, L"filter")) {
                         
                            filter_type = (gd_filter_type_t)(int)ob_get_n(param, L"filter");
                            
                            radius = (int)ob_get_n(param, L"radius");
                            sigma = (double)ob_get_n(param, L"sigma");
                            weight = (float)ob_get_n(param, L"weight");
                            contrast = (double)ob_get_n(param, L"contrast");
                            brightness = (int)ob_get_n(param, L"brightness");
                            sub = (int)ob_get_n(param, L"sub");
                            plus = (int)ob_get_n(param, L"plus");
                            size = (int)ob_get_n(param, L"size");
                            mode = (unsigned int)ob_get_n(param, L"mode");
                            red = (int)ob_get_n(param, L"red");
                            green = (int)ob_get_n(param, L"green");
                            blue = (int)ob_get_n(param, L"blue");
                            alpha = (int)ob_get_n(param, L"alpha");
                            div = (float)ob_get_n(param, L"div");
                            offset = (float)ob_get_n(param, L"offset");
                            
                            if(ob_is_defined(param, L"matrix")) {
                                PA_CollectionRef m = ob_get_c(param, L"matrix");
                                if(m) {
                                    if(3 == PA_GetCollectionLength(m)) {
                                        
                                        PA_Variable v0 = PA_GetCollectionElement(m, 0);
                                        if(PA_GetVariableKind(v0) == eVK_Collection) {
                                            PA_CollectionRef m0 = PA_GetCollectionVariable(v0);
                                            if(3 == PA_GetCollectionLength(m0)) {
                                                PA_Variable e0 = PA_GetCollectionElement(m0, 0);
                                                PA_Variable e1 = PA_GetCollectionElement(m0, 1);
                                                PA_Variable e2 = PA_GetCollectionElement(m0, 2);
                                                if(PA_GetVariableKind(e0) == eVK_Real) {
                                                    filter[0][0] = PA_GetRealVariable(e0);
                                                }
                                                if(PA_GetVariableKind(e1) == eVK_Real) {
                                                    filter[0][1] = PA_GetRealVariable(e1);
                                                }
                                                if(PA_GetVariableKind(e2) == eVK_Real) {
                                                    filter[0][2] = PA_GetRealVariable(e2);
                                                }
                                            }
                                        }
                                        
                                        PA_Variable v1 = PA_GetCollectionElement(m, 1);
                                        if(PA_GetVariableKind(v1) == eVK_Collection) {
                                            PA_CollectionRef m0 = PA_GetCollectionVariable(v1);
                                            if(3 == PA_GetCollectionLength(m0)) {
                                                PA_Variable e0 = PA_GetCollectionElement(m0, 0);
                                                PA_Variable e1 = PA_GetCollectionElement(m0, 1);
                                                PA_Variable e2 = PA_GetCollectionElement(m0, 2);
                                                if(PA_GetVariableKind(e0) == eVK_Real) {
                                                    filter[1][0] = PA_GetRealVariable(e0);
                                                }
                                                if(PA_GetVariableKind(e1) == eVK_Real) {
                                                    filter[1][1] = PA_GetRealVariable(e1);
                                                }
                                                if(PA_GetVariableKind(e2) == eVK_Real) {
                                                    filter[1][2] = PA_GetRealVariable(e2);
                                                }
                                            }
                                        }

                                        PA_Variable v2 = PA_GetCollectionElement(m, 2);
                                        if(PA_GetVariableKind(v2) == eVK_Collection) {
                                            PA_CollectionRef m0 = PA_GetCollectionVariable(v2);
                                            if(3 == PA_GetCollectionLength(m0)) {
                                                PA_Variable e0 = PA_GetCollectionElement(m0, 0);
                                                PA_Variable e1 = PA_GetCollectionElement(m0, 1);
                                                PA_Variable e2 = PA_GetCollectionElement(m0, 2);
                                                if(PA_GetVariableKind(e0) == eVK_Real) {
                                                    filter[2][0] = PA_GetRealVariable(e0);
                                                }
                                                if(PA_GetVariableKind(e1) == eVK_Real) {
                                                    filter[2][1] = PA_GetRealVariable(e1);
                                                }
                                                if(PA_GetVariableKind(e2) == eVK_Real) {
                                                    filter[2][2] = PA_GetRealVariable(e2);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            
                            bool isFilterValid = false;
                            
                            PA_ObjectRef status = PA_CreateObject();
                            
                            switch (filter_type) {
                                case IMG_FILTER_NONE:
                                    ob_set_b(status, L"success", true);
                                    ob_set_i(status, L"filter", IMG_FILTER_NONE);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_NEGATE:
                                    ob_set_b(status, L"success", gdImageNegate(gd_in));
                                    ob_set_i(status, L"filter", IMG_FILTER_NEGATE);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_GRAYSCALE:
                                    ob_set_b(status, L"success", gdImageGrayScale(gd_in));
                                    ob_set_i(status, L"filter", IMG_FILTER_GRAYSCALE);
                                    isFilterValid = true;
                                    break;
                            
                                case IMG_FILTER_EDGEDETECT:
                                    ob_set_b(status, L"success", gdImageEdgeDetectQuick(gd_in));
                                    ob_set_i(status, L"filter", IMG_FILTER_EDGEDETECT);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_EMBOSS:
                                    ob_set_b(status, L"success", gdImageEmboss(gd_in));
                                    ob_set_i(status, L"filter", IMG_FILTER_EMBOSS);
                                    isFilterValid = true;
                                    break;

                                case IMG_FILTER_SELECTIVE_BLUR:
                                    ob_set_b(status, L"success", gdImageSelectiveBlur(gd_in));
                                    ob_set_i(status, L"filter", IMG_FILTER_SELECTIVE_BLUR);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_GAUSSIAN_BLUR:
                                    ob_set_b(status, L"success", gdImageCopyGaussianBlurred(gd_in, radius, sigma));
                                    ob_set_i(status, L"filter", IMG_FILTER_GAUSSIAN_BLUR);
                                    isFilterValid = true;
                                    break;
                                
                                case IMG_FILTER_MEAN_REMOVAL:
                                    ob_set_b(status, L"success", gdImageMeanRemoval(gd_in));
                                    ob_set_i(status, L"filter", IMG_FILTER_MEAN_REMOVAL);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_SMOOTH:
                                    ob_set_b(status, L"success", gdImageSmooth(gd_in, weight));
                                    ob_set_i(status, L"filter", IMG_FILTER_SMOOTH);
                                    isFilterValid = true;
                                    break;
                                
                                case IMG_FILTER_CONTRAST:
                                    ob_set_b(status, L"success", gdImageContrast(gd_in, contrast));
                                    ob_set_i(status, L"filter", IMG_FILTER_CONTRAST);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_BRIGHTNESS:
                                    ob_set_b(status, L"success", gdImageBrightness(gd_in, brightness));
                                    ob_set_i(status, L"filter", IMG_FILTER_BRIGHTNESS);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_SCATTER:
                                    ob_set_b(status, L"success", gdImageScatter(gd_in, sub, plus));
                                    ob_set_i(status, L"filter", IMG_FILTER_SCATTER);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_PIXELATE:
                                    ob_set_b(status, L"success", gdImagePixelate(gd_in, size, mode));
                                    ob_set_i(status, L"filter", IMG_FILTER_PIXELATE);
                                    isFilterValid = true;
                                    break;
                                    
                                case IMG_FILTER_COLORIZE:
                                ob_set_b(status, L"success", gdImageColor(gd_in, red, green, blue, alpha));
                                ob_set_i(status, L"filter", IMG_FILTER_COLORIZE);
                                isFilterValid = true;
                                break;
                                    
                                    case IMG_FILTER_CONVOLUTION:
                                    ob_set_b(status, L"success", gdImageConvolution(gd_in, filter, div, offset));
                                    ob_set_i(status, L"filter", IMG_FILTER_CONVOLUTION);
                                    isFilterValid = true;
                                    break;
                                    
                                default:
                                    break;
                            }
                            
                            if(isFilterValid) {
                                PA_Variable v = PA_CreateVariable(eVK_Object);
                                PA_SetObjectVariable(&v, status);
                                PA_SetCollectionElement(statuses, PA_GetCollectionLength(statuses), v);
                                PA_ClearVariable(&v);
                            }
                        }
                    }
                }
                
                int len = 0;
                void *bytes = NULL;
                bytes = gdImagePngPtr(gd_in, &len);
                PA_Picture picture = PA_CreatePicture((void *)bytes, len);
                ob_set_p(returnValue, L"image", picture);
                
            }
        }
        
        gdImageDestroy(gd_in);
    }
    
    ob_set_c(returnValue, L"statuses", statuses);
    PA_ReturnObject(params, returnValue);
}

void GD_Animate(PA_PluginParameters params) {

    PA_ObjectRef returnValue = PA_CreateObject();
    bool success = false;
    
    PA_CollectionRef images = PA_GetCollectionParameter(params, 1);
    
    if(images) {
        PA_long32 countImages = PA_GetCollectionLength(images);
        if(countImages > 0) {
            
            std::vector<gdImagePtr> frames(0);
            
            for(PA_long32 i = 0; i < countImages; ++i) {
                PA_Variable v = PA_GetCollectionElement(images, i);
                if(PA_GetVariableKind(v) == eVK_Picture) {
                                        
                    gdImagePtr image = getImagePtr(PA_GetPictureVariable(v));
                    
                    if(image) // NULL if image is not GIF
                    {
                        frames.push_back(image);
                    }
                }
            }
            
            /* create animation gif */
            if(frames.size())
            {
                int len = 0;
                void *bytes = NULL;
                C_BLOB result;
                int delay = (int)PA_GetLongParameter(params, 2);

                bytes = gdImageGifAnimBeginPtr(frames[0], &len, 1, gdLoopInfinite);
                result.addBytes((const uint8_t *)bytes, len);
                gdFree(bytes);
                
                for(size_t i = 0; i < frames.size(); ++i)
                {
                    PA_YieldAbsolute();
                    bytes = gdImageGifAnimAddPtr(frames[i],
                                                 &len,
                                                 1,
                                                 0,
                                                 0,
                                                 delay,
                                                 i == 0 ? gdDisposalNone : gdDisposalRestorePrevious,
                                                 i == 0 ? NULL : frames[i-1]);
                    result.addBytes((const uint8_t *)bytes, len);
                    gdFree(bytes);
                }
                
                bytes = gdImageGifAnimEndPtr(&len);
                result.addBytes((const uint8_t *)bytes, len);
                gdFree(bytes);

                for(size_t i = 0; i < frames.size(); ++i)
                {
                    PA_YieldAbsolute();
                    gdImageDestroy(frames[i]);
                }

                PA_Picture picture = PA_CreatePicture((void *)result.getBytesPtr(), result.getBytesLength());
                ob_set_p(returnValue, L"image", picture);
                success = true;
                
            }
        }
    }

    ob_set_b(returnValue, L"success", success);
    PA_ReturnObject(params, returnValue);
}

void GD_Rotate(PA_PluginParameters params) {
            
    PA_CollectionRef statuses = PA_CreateCollection();
    PA_ObjectRef returnValue = PA_CreateObject();
    
    gdImagePtr gd_in = getImagePtrParameter(params, 1);
    
    if(gd_in){
                
        PA_CollectionRef angles = PA_GetCollectionParameter(params, 2);
        
        if(angles) {
            
            PA_long32 countAngles = PA_GetCollectionLength(angles);
            if(countAngles > 0) {
                                
                PA_ObjectRef options = PA_GetObjectParameter(params, 3);
                
                int red = 0L;
                int green = 0L;
                int blue = 0L;
                int alpha = 0L;
                
                bool withFill = false;
                
                if(options) {
                    
                    red = (int)ob_get_n(options, L"red");
                    green = (int)ob_get_n(options, L"green");
                    blue = (int)ob_get_n(options, L"blue");
                    alpha = (int)ob_get_n(options, L"alpha");
                    
                    withFill = true;
                }
                
                for(PA_long32 i = 0; i < countAngles; ++i) {
                    PA_Variable v = PA_GetCollectionElement(angles, i);
                    if(PA_GetVariableKind(v) == eVK_Object) {
                        
                        PA_ObjectRef o = PA_GetObjectVariable(v);
                        
                        double angle = 0.0f;
                        int sx = 0L;
                        int sy = 0L;
                        
                        if(o) {

                            if(ob_is_defined(o, L"angle")) {
                                angle = ob_get_n(o, L"angle");
                            }
                            
                            double radian = angle * M_PI / 180.0;
                            
                            if(ob_is_defined(o, L"width")) {
                                sx = ob_get_n(o, L"width");
                            }
                            
                            if(ob_is_defined(o, L"height")) {
                                sy = ob_get_n(o, L"height");
                            }
                            
                            if((!sx) && (!sy)) {
                                sx = abs(gdImageSX(gd_in) * cos(radian)) + abs(gdImageSY(gd_in) * sin(radian));
                                sy = abs(gdImageSX(gd_in) * sin(radian)) + abs(gdImageSY(gd_in) * cos(radian));
                            }
                            
                            gdImagePtr gd_out = gdImageCreateTrueColor(sx, sy);
                            
                            if(gd_out)
                            {

                                if(withFill) {
                                    gdImageAlphaBlending(gd_out, 0);
                                    gdImageFill(gd_out, 0, 0, gdImageColorAllocateAlpha(gd_out, red, green, blue, alpha));
                                    gdImageSaveAlpha(gd_out, 1);
                                }else{
                                    /* make background transparent */
                                    gdImageAlphaBlending(gd_out, 0);
                                    /* probably better to default as white transparent than black transparent */
                                    gdImageFill(gd_out, 0, 0, gdImageColorAllocateAlpha(gd_out, 255, 255, 255, 255));
                                    gdImageSaveAlpha(gd_out, 1);
                                }

                                gdImageCopyRotated(gd_out, gd_in,
                                                   gdImageSX(gd_out)/2, // dstX
                                                   gdImageSY(gd_out)/2, // dstY
                                                   0, // srcX
                                                   0, // srcY
                                                   gdImageSX(gd_in), // srcWidth
                                                   gdImageSY(gd_in), // srcHeight
                                                   angle);

                                PA_ObjectRef status = PA_CreateObject();
                                
                                int len = 0;
                                void *bytes = NULL;
                                bytes = gdImagePngPtr(gd_out, &len);
                                PA_Picture picture = PA_CreatePicture((void *)bytes, len);
                                ob_set_p(status, L"image", picture);
                                ob_set_n(status, L"angle", angle);
                                
                                PA_Variable v = PA_CreateVariable(eVK_Object);
                                PA_SetObjectVariable(&v, status);
                                PA_SetCollectionElement(statuses, PA_GetCollectionLength(statuses), v);
                                PA_ClearVariable(&v);
                                
                                gdImageDestroy(gd_out);
                            }
                        }
                    }
                }
            }
        }
        
        gdImageDestroy(gd_in);
    }
    
    ob_set_c(returnValue, L"images", statuses);
    PA_ReturnObject(params, returnValue);
}
